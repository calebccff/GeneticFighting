/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here
 } //_CODE_:button1:12356:

 * Do not rename this tab!
 * =========================================================
 */

public void handlerButtonRun(GButton source, GEvent event) { //_CODE_:buttonRun:324073:
  fighters = new Fighter[GAME_SIZE*2]; //Create all the fighters
  games = new Game[GAME_SIZE];
  for (int i = 0; i < GAME_SIZE; ++i) { //Initialises all the games
    fighters[i*2] = new Fighter(LEFT, i*2); //Use some existing methods to specify what side of the screen each fighter is on
    fighters[i*2+1] = new Fighter(RIGHT, i*2+1);

    games[i] = new Game(fighters[i*2], fighters[i*2+1]); //Creates a new game and passes REFERENCES to two fighters, allows the game AND main program to handle the fighters
  }
  state = 1; //Need to change this to a state variable, it decides what to draw
  hideGUI();
  threadInit();
} //_CODE_:buttonRun:324073:

public void handlerButtonExit(GButton source, GEvent event) { //_CODE_:buttonExit:564504:
  exit();
} //_CODE_:buttonExit:564504:

public void handlerSliderGameSize(GSlider source, GEvent event) { //_CODE_:sliderGameSize:485991:
  GAME_SIZE = int(float(source.getValueI())/100.0)*100;
} //_CODE_:sliderGameSize:485991:


// Create all the GUI controls.
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  buttonRun = new GButton(this, 390, 640, 130, 30);
  buttonRun.setText("Run it!");
  buttonRun.addEventHandler(this, "handlerButtonRun");
  buttonExit = new GButton(this, 20, 640, 130, 30);
  buttonExit.setText("Exit");
  buttonExit.addEventHandler(this, "handlerButtonExit");
  descGameSize = new GLabel(this, 10, 30, 113, 44);
  descGameSize.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  descGameSize.setText("How many games do you want? (100-10000)");
  descGameSize.setOpaque(false);
  sliderGameSize = new GSlider(this, 140, 30, 440, 60, 10.0);
  sliderGameSize.setShowValue(true);
  sliderGameSize.setLimits(800, 100, 10000);
  sliderGameSize.setNbrTicks(100);
  sliderGameSize.setStickToTicks(true);
  sliderGameSize.setShowTicks(true);
  sliderGameSize.setNumberFormat(G4P.INTEGER, 0);
  sliderGameSize.setOpaque(false);
  sliderGameSize.addEventHandler(this, "handlerSliderGameSize");
}

// Variable declarations
// autogenerated do not edit
GButton buttonRun;
GButton buttonExit;
GLabel descGameSize;
GSlider sliderGameSize;
